package com.chejet.cloud.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.chejet.cloud.annotation.OperationType;
import com.chejet.cloud.annotation.Slog;
import com.chejet.cloud.common.ErrorCodeEnum;
import com.chejet.cloud.exception.BaseException;
import com.chejet.cloud.po.App;
import com.chejet.cloud.po.Company;
import com.chejet.cloud.po.RelCompanyApp;
import com.chejet.cloud.response.ApiResp;
import com.chejet.cloud.response.ResultBuilder;
import com.chejet.cloud.service.CompanyService;
import com.chejet.cloud.util.BeanUtil;
import com.chejet.cloud.vo.AppDeployModuleVO;
import com.chejet.cloud.vo.CompanyVO;
import com.chejet.cloud.vo.ItemVO;
import org.apache.commons.lang3.StringUtils;
import org.beetl.sql.core.engine.PageQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 * 公司管理api
 *
 * @author ansen.zhu@carlt.com.cn
 * @date 2018/12/13
 */
@RestController
@RequestMapping(value = "/company", produces = "application/json;charset=UTF-8")
public class CompanyController extends BaseController {
    @Autowired
    CompanyService companyService;

    @Slog(operation_type = OperationType.CREATE)
    @RequestMapping(KEY_SAVE)
    public ApiResp save(@RequestBody String payload) throws Exception {
        Company company = JSONObject.parseObject(payload, Company.class);
        BeanUtil.beanAttributeValueTrim(company);
        boolean temp = companyService.saveCompany(company, currentUser());
        if (temp) {
            return success(SAVE_SUCCESS_MSG);
        } else {
            return error(SAVE_FAIL_MSG);
        }
    }


    @Slog(operation_type = OperationType.DELETE)
    @RequestMapping(KEY_REMOVE)
    public ApiResp remove(Company company) throws Exception {
        boolean temp = companyService.deleteCompany(company, currentUser());
        if (temp == true) {
            return success(DEL_SUCCESS_MSG);
        } else {
            return error(DEL_FAIL_MSG);
        }
    }

    @RequestMapping(KEY_QUERY)
    public ApiResp query(Company company) throws Exception {
        List<Company> retList = companyService.queryCompany(company);
        if (retList != null) {
            return success(retList, QUERY_SUCCESS_MSG);
        } else {
            return error(QUERY_FAIL_MSG);
        }
    }

    @Slog(operation_type = OperationType.UPDATE)
    @RequestMapping(KEY_EDIT)
    public ApiResp update(@RequestBody String payload) throws Exception {
        Company company = JSONObject.parseObject(payload, Company.class);
        BeanUtil.beanAttributeValueTrim(company);
        boolean temp = companyService.updateCompany(company,currentUser());
        if (temp) {
            return ApiResp.success(temp, UPDATE_SUCCESS_MSG);
        } else {
            return ApiResp.failed(temp);
        }
    }

    @RequestMapping("/dict")
    public ApiResp dict(Company company) throws Exception {
        List<ItemVO> listVO = companyService.listCompany(currentUser());
        if (listVO != null) {
            return success(listVO, PAGE_SUCCESS_MSG);
        } else {
            return error(PAGE_FAIL_MSG);
        }
    }

    @RequestMapping(KEY_PAGE)
    public ApiResp page(Company company) throws Exception {
        PageQuery<Company> voPage = companyService.pageCompany(company, currentUser());
        if (voPage != null) {
            return success(voPage, PAGE_SUCCESS_MSG);
        } else {
            return error(PAGE_FAIL_MSG);
        }
    }

    @RequestMapping(KEY_TREE)
    public ApiResp tree(Company company) throws Exception {
        List<CompanyVO> voTree = companyService.treeCompany(company, currentUser());
        if (voTree != null) {
            return success(voTree, PAGE_SUCCESS_MSG);
        } else {
            return error(PAGE_FAIL_MSG);
        }
    }

    @RequestMapping("/staff_scale/dict")
    public ApiResp dict() throws Exception {
        List<ItemVO> listVO = getStaffScaleEnum();
        if (listVO != null) {
            return success(listVO, PAGE_SUCCESS_MSG);
        } else {
            return error(PAGE_FAIL_MSG);
        }
    }

    @RequestMapping("/role/{companyId}")
    public ApiResp role(@PathVariable Long companyId) throws Exception {
        // update返回值
        List<App> listVO = companyService.getCompanyRoleList(companyId, currentUser());
        if (listVO != null) {
            return success(listVO, QUERY_SUCCESS_MSG);
        } else {
            return error(QUERY_FAIL_MSG);
        }
    }

    @RequestMapping("/app/list/{companyId}")
    public ApiResp appList(@PathVariable Long companyId) throws Exception {
        // update返回值
        List<AppDeployModuleVO> li = companyService.listCompanyApp(companyId, currentUser());
        if (li != null) {
            return success(li, QUERY_SUCCESS_MSG);
        } else {
            return error(QUERY_FAIL_MSG);
        }
    }

    @Slog(operation_type = OperationType.CREATE)
    @RequestMapping("/app/save")
    public ApiResp app(@RequestBody String payload) throws Exception {
        JSONArray jArray = JSONArray.parseArray(payload);
        List<RelCompanyApp> rcaList = jArray.toJavaList(RelCompanyApp.class);
        // update返回值
        boolean temp = companyService.saveCompanyApp(rcaList, currentUser());
        if (temp) {
            return ApiResp.success(temp);
        } else {
            return ApiResp.failed(temp);
        }
    }

    @RequestMapping("/app/dict/{companyId}")
    public ApiResp appDict(@PathVariable Long companyId) throws Exception {
        // update返回值
        List<ItemVO> li = companyService.dictCompanyApp(companyId, currentUser());
        if (li != null) {
            return success(li, QUERY_SUCCESS_MSG);
        } else {
            return error(QUERY_FAIL_MSG);
        }
    }


    @RequestMapping(KEY_APP_DEPLOY_MODULE)
    public ApiResp appListAndDeployModule(Long companyId) throws Exception {
        List<AppDeployModuleVO> voTree = companyService.appListAndDeployModule(companyId, currentUser());
        if (voTree != null) {
            return success(voTree, PAGE_SUCCESS_MSG);
        } else {
            return error(PAGE_FAIL_MSG);
        }
    }

    @Slog(operation_type = OperationType.DELETE)
    @RequestMapping(KEY_APP_DEPLOY_MODULE + KEY_REMOVE)
    public ApiResp deleteCompanyAppModule(@RequestBody String payload) throws Exception {
        JSONObject obj = JSON.parseObject(payload);
        if (obj == null
                || StringUtils.isBlank(obj.getString("companyId"))
                || StringUtils.isBlank(obj.getString("appId"))
                || StringUtils.isBlank(obj.getString("deployModuleId"))) {
            throw new BaseException(ErrorCodeEnum.PARAM_ERROR);
        }
        boolean isDel = companyService.deleteCompanyAppModule(obj.getLong("companyId"), obj.getLong("appId"), obj.getLong("deployModuleId"));
        return ResultBuilder.buildDateSuccess(isDel);
    }

}
