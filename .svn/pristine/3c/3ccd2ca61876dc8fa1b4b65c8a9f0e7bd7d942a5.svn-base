package com.chejet.cloud.service.impl;

import com.chejet.cloud.common.CurrentUserInfo;
import com.chejet.cloud.common.ErrorCodeEnum;
import com.chejet.cloud.dao.EmployeeMapper;
import com.chejet.cloud.exception.BizException;
import com.chejet.cloud.po.*;
import com.chejet.cloud.service.EmployeeService;
import com.chejet.cloud.util.LongIdGen;
import com.chejet.cloud.util.PasswordProvider;
import com.chejet.cloud.util.StringUtils;
import org.beetl.sql.core.DSTransactionManager;
import org.beetl.sql.core.SQLManager;
import org.beetl.sql.core.SQLReady;
import org.beetl.sql.core.engine.PageQuery;
import org.beetl.sql.core.query.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 员工管理biz 实现
 *
 * @author ansen.zhu@carlt.com.cn
 * @date 2018/12/13
 */
@Service
public class EmployeeServiceImpl implements EmployeeService {

	private Logger logger = LoggerFactory.getLogger(EmployeeServiceImpl.class);

	@Autowired
	EmployeeMapper employeeMapper;

	@Autowired
	private SQLManager sqlManager;

	@Override
	public PageQuery<Employee> pageEmployee(Employee employee, CurrentUserInfo currentUser) {

		PageQuery<Employee> query = null;
		PageQuery<Employee> page = null;
		try {
			if (employee != null && employee.getCompanyId() != null) {
				query = new PageQuery<Employee>();
				query.setPageNumber(employee.getPageNumber());
				query.setPageSize(employee.getPageSize());
				if (!StringUtils.isEmpty(employee.getTelephone())) {
					query.setPara("telephone", employee.getTelephone());
				}
				if (!StringUtils.isEmpty(employee.getName())) {
					query.setPara("name", employee.getName());
				}

				query.setPara("companyId", employee.getCompanyId());

				if (!StringUtils.isBlank(employee.getOrderBy())) {
					query.setOrderBy(employee.getOrderBy());
				}
				page = sqlManager.pageQuery("employee.pageEmployee", Employee.class, query);
			} else {
				throw new BizException(ErrorCodeEnum.PARAM_ERROR);
			}
		} catch (Exception e) {
			logger.error("查询员工列表出错：{}", e.getMessage());
			throw new BizException(ErrorCodeEnum.EMPLOYEE_PAGE_GET_ERROR);
		}

		return page;
	}

	@Override
	public List<Employee> listEmployee(Employee employee, CurrentUserInfo currentUser) {
		List<Employee> list = null;
		try {
			if (employee != null && employee.getCompanyId() != null) {

				Map<String, Object> map = new HashMap<String, Object>();

				if (!StringUtils.isEmpty(employee.getTelephone())) {
					map.put("telephone", employee.getTelephone());
				}

				if (!StringUtils.isEmpty(employee.getName())) {
					map.put("name", employee.getName());
				}

				map.put("companyId", employee.getCompanyId());

				list = sqlManager.select("employee.listEmployee", Employee.class, map);

			} else {
				throw new BizException(ErrorCodeEnum.PARAM_ERROR);
			}
		} catch (Exception e) {
			logger.error("员工列表导出出错：{}", e.getMessage());
			throw new BizException(ErrorCodeEnum.EMPLOYEE_EXPORT_ERROR);
		}

		return list;
	}

	@Override
	public boolean saveEmployee(Employee employee, CurrentUserInfo currentUser) throws Exception {

		int i = 0;
		try {
			if (currentUser.getTenantId() != 0L) {
				if (employee != null && employee.getDepartmentId() != null && employee.getCompanyId() != null
						&& !StringUtils.isEmpty(employee.getTelephone()) && !StringUtils.isEmpty(employee.getName())) {
					Query<User> query = sqlManager.query(User.class);
					User user = query.andEq("telephone", employee.getTelephone()).single("id", "name", "telephone");
					if (user == null) {
						if (employee.getRelRoleList() != null) {
							User u = new User();
							long userId = LongIdGen.get().nextId();
							u.setId(userId);
							u.setNickname(employee.getTelephone());
							u.setUsername(employee.getTelephone());
							u.setPassword(PasswordProvider.encrypt(PasswordProvider.generateRandomPassword(6, true)));
							u.setName(employee.getName());
							u.setTelephone(employee.getTelephone());
							Date d = new Date();
							u.setCtime(d);
							u.setMtime(d);
							u.setRegisterTime(d);

							long id = LongIdGen.get().nextId();
							employee.setId(id);
							employee.setCtime(d);
							employee.setMtime(d);
							employee.setUserId(userId);
							employee.setName(employee.getName());
							employee.setStatus(1);
							employee.setCompanyId(employee.getCompanyId());
							employee.setTenantId(currentUser.getTenantId());

							List<EmployeeAppScope> scopePermissonList = new ArrayList<EmployeeAppScope>(
									employee.getRelRoleList().size());
							for (RelUserGroupRole ur : employee.getRelRoleList()) {
								long id2 = LongIdGen.get().nextId();
								ur.setId(id2);
								ur.setCtime(d);
								ur.setMtime(d);
								ur.setEmployeeId(employee.getId());
								ur.setCompanyId(employee.getCompanyId());
								ur.setUserId(userId);
								ur.setTenantId(currentUser.getTenantId());

								EmployeeAppScope as = new EmployeeAppScope();

								long id3 = LongIdGen.get().nextId();
								as.setId(id3);
								as.setScopeCode("department");
								as.setCtime(d);
								as.setMtime(d);
								as.setAppId(ur.getAppId());
								as.setEmployeeId(employee.getId());
								as.setCompanyId(employee.getCompanyId());
								as.setUserId(userId);
								as.setTenantId(currentUser.getTenantId());
								scopePermissonList.add(as);
							}

							DSTransactionManager.start();
							sqlManager.insertTemplate(u);
							sqlManager.insertTemplate(employee);
							sqlManager.insertBatch(RelUserGroupRole.class, employee.getRelRoleList());
							sqlManager.insertBatch(EmployeeAppScope.class, scopePermissonList);
							DSTransactionManager.commit();

						} else {
							User u = new User();
							long userId = LongIdGen.get().nextId();
							u.setId(userId);
							u.setNickname(employee.getTelephone());
							u.setUsername(employee.getTelephone());
							u.setPassword(PasswordProvider.encrypt(PasswordProvider.generateRandomPassword(6, true)));
							u.setName(employee.getName());
							u.setTelephone(employee.getTelephone());
							Date d = new Date();
							u.setCtime(d);
							u.setMtime(d);
							u.setRegisterTime(d);

							long id = LongIdGen.get().nextId();
							employee.setId(id);
							employee.setCtime(d);
							employee.setMtime(d);
							employee.setUserId(userId);
							employee.setStatus(1);
							employee.setName(employee.getName());
							employee.setCompanyId(employee.getCompanyId());
							employee.setTenantId(currentUser.getTenantId());

							DSTransactionManager.start();
							sqlManager.insertTemplate(u);
							sqlManager.insertTemplate(employee);
							DSTransactionManager.commit();
						}

					} else {
						List<Employee> eList = sqlManager.execute(new SQLReady(
								"SELECT se.*, su.name, su.telephone FROM sys_employee se "
										+ "LEFT JOIN sys_user su ON se.user_id = su.id WHERE su.telephone=? "
										+ "AND se.company_id=? and se.tenant_id=?",
								employee.getTelephone(), employee.getCompanyId(), currentUser.getTenantId()),
								Employee.class);

						if (eList != null && !eList.isEmpty()) {
							throw new BizException(ErrorCodeEnum.EMPLOYEE_EXISTS);
						} else {
							if (employee.getRelRoleList() != null) {
								// 创建员工
								long id = LongIdGen.get().nextId();
								employee.setId(id);
								Date d = new Date();
								employee.setCtime(d);
								employee.setMtime(d);
								employee.setUserId(user.getId());
								employee.setStatus(1);
								employee.setName(user.getName());
								employee.setTenantId(currentUser.getTenantId());

								// 创建角色
								List<EmployeeAppScope> scopePermissonList = new ArrayList<EmployeeAppScope>(
										employee.getRelRoleList().size());
								for (RelUserGroupRole ur : employee.getRelRoleList()) {
									long id2 = LongIdGen.get().nextId();
									ur.setId(id2);
									ur.setCtime(d);
									ur.setMtime(d);
									ur.setEmployeeId(employee.getId());
									ur.setCompanyId(employee.getCompanyId());
									ur.setUserId(user.getId());
									ur.setTenantId(currentUser.getTenantId());
									EmployeeAppScope as = new EmployeeAppScope();

									long id3 = LongIdGen.get().nextId();
									as.setId(id3);
									as.setScopeCode("department");
									as.setCtime(d);
									as.setMtime(d);
									as.setAppId(ur.getAppId());
									as.setEmployeeId(employee.getId());
									as.setCompanyId(employee.getCompanyId());
									as.setUserId(user.getId());
									as.setTenantId(currentUser.getTenantId());
									scopePermissonList.add(as);

								}

								DSTransactionManager.start();
								sqlManager.insertTemplate(employee);
								sqlManager.insertBatch(RelUserGroupRole.class, employee.getRelRoleList());
								sqlManager.insertBatch(EmployeeAppScope.class, scopePermissonList);
								DSTransactionManager.commit();

							} else {
								// 创建员工
								long id = LongIdGen.get().nextId();
								employee.setId(id);
								Date d = new Date();
								employee.setCtime(d);
								employee.setMtime(d);
								employee.setUserId(user.getId());
								employee.setStatus(1);
								employee.setName(user.getName());
								employee.setTenantId(currentUser.getTenantId());
								i = sqlManager.insertTemplate(employee);
							}
						}
					}
				} else {
					throw new BizException(ErrorCodeEnum.PARAM_ERROR);
				}
			} else {
				throw new BizException(ErrorCodeEnum.TENANT_ID_ERROR);
			}

		} catch (BizException e) {
			DSTransactionManager.rollback();
			e.printStackTrace();
			throw e;
		}

		return true;
	}

	@Override
	public boolean deleteEmployee(Long companyId, Long employeeId, CurrentUserInfo currentUser) throws Exception {

		try {
			if (currentUser.getTenantId() != null) {
				if (companyId != null && employeeId != null) {
					Query<Employee> query = sqlManager.query(Employee.class);
					Employee employee = query.andEq("id", employeeId).single();
					if (employee != null) {
						DSTransactionManager.start();
						sqlManager.executeUpdate(new SQLReady("delete from sys_employee where id=?", employeeId));
						sqlManager.executeUpdate(
								new SQLReady("delete from rel_user_group_role where employee_id=? and company_id=?",
										employeeId, companyId));
						sqlManager.executeUpdate(
								new SQLReady("delete from sys_employee_app_scope where employee_id=? and company_id=?",
										employeeId, companyId));
						DSTransactionManager.commit();
					} else {
						throw new BizException(ErrorCodeEnum.EMPLOYEE_NONEXISTS);
					}
				} else {
					throw new BizException(ErrorCodeEnum.EMPLOYEE_NONEXISTS);
				}

			}
		} catch (BizException e) {
			DSTransactionManager.rollback();
			e.printStackTrace();
			throw e;
		}

		return true;
	}

	@Override
	public boolean editEmployee(Employee employee, CurrentUserInfo currentUser) throws Exception {
		int i = 0;

		try {
			if (currentUser.getTenantId() != 0L) {

				if (employee != null && employee.getDepartmentId() != null && employee.getCompanyId() != null
						&& !StringUtils.isEmpty(employee.getTelephone()) && !StringUtils.isEmpty(employee.getName())) {
					Date d = new Date();
					employee.setMtime(d);
					DSTransactionManager.start();
					i = sqlManager.updateTemplateById(employee);
					sqlManager.executeUpdate(
							new SQLReady("delete from rel_user_group_role where employee_id=? and company_id=?",
									employee.getId(), employee.getCompanyId()));
					DSTransactionManager.commit();
					if (employee.getRelRoleList() != null && !employee.getRelRoleList().isEmpty()) {
						for (RelUserGroupRole ur : employee.getRelRoleList()) {
							long id = LongIdGen.get().nextId();
							ur.setId(id);
							ur.setCtime(d);
							ur.setMtime(d);
							ur.setEmployeeId(employee.getId());
							ur.setCompanyId(employee.getCompanyId());
							ur.setUserId(employee.getUserId());
							ur.setTenantId(currentUser.getTenantId());
						}
						DSTransactionManager.start();
						sqlManager.insertBatch(RelUserGroupRole.class, employee.getRelRoleList());
						DSTransactionManager.commit();
					}
				} else {
					throw new BizException(ErrorCodeEnum.PARAM_ERROR);
				}

			}

		} catch (Exception e) {
			DSTransactionManager.rollback();
			e.printStackTrace();
			throw e;
		}

		return i == 1;
	}

	@Override
	public Employee listEmployeePermisson(Long employeeId, Long appId, CurrentUserInfo currentUser) {
		// id,appId
		Employee employee = new Employee();
		int i = 0;

		if (currentUser.getTenantId() != 0L) {
			if (employeeId != null && appId != null) {
				employee.setId(employeeId);
				employee.setAppId(appId);
				List<GroupAppRole> eList = sqlManager.execute(new SQLReady(
						"SELECT sr.* FROM sys_group_app_role sr  LEFT JOIN rel_user_group_role rr ON sr.id = rr.role_id WHERE rr.employee_id=? and rr.app_id=?",
						employeeId, appId), GroupAppRole.class);
				if (eList != null && !eList.isEmpty()) {
					for (GroupAppRole ar : eList) {
						ar.setRelDataPermission(sqlManager.lambdaQuery(RelRoleDataPermission.class)
								.andEq(RelRoleDataPermission::getRoleId, ar.getId()).select());
						ar.setRelPointPermission(sqlManager.lambdaQuery(RelRolePointPermission.class)
								.andEq(RelRolePointPermission::getRoleId, ar.getId()).select());
					}

					employee.setGroupAppRole(eList);

					employee.setScopePermisson(sqlManager.lambdaQuery(EmployeeAppScope.class)
							.andEq(EmployeeAppScope::getEmployeeId, employeeId).andEq(EmployeeAppScope::getAppId, appId)
							.single());

				} else {
					throw new BizException(ErrorCodeEnum.USER_ROLE_INVALID);
				}
			} else {
				throw new BizException(ErrorCodeEnum.PARAM_ERROR);
			}

		} else {
			throw new BizException(ErrorCodeEnum.TENANT_ID_ERROR);
		}

		return employee;
	}

	@Override
	public boolean editEmployeePermisson(Employee employee, CurrentUserInfo currentUser) throws Exception {
		DSTransactionManager.start();
		try {
			if (currentUser.getTenantId() != 0L) {
				Date d = new Date();
				if (employee.getRelRoleList() != null && !employee.getRelRoleList().isEmpty()) {
					for (RelUserGroupRole ur : employee.getRelRoleList()) {
						sqlManager.executeUpdate(
								new SQLReady("delete from rel_user_group_role where employee_id=? and app_id=?",
										employee.getId(), ur.getAppId()));
						long id = LongIdGen.get().nextId();
						ur.setId(id);
						ur.setCtime(d);
						ur.setMtime(d);
						ur.setCompanyId(employee.getCompanyId());
						ur.setEmployeeId(employee.getId());
						ur.setUserId(employee.getUserId());
						ur.setTenantId(currentUser.getTenantId());
					}

					sqlManager.insertBatch(RelUserGroupRole.class, employee.getRelRoleList());
				} else {
					throw new BizException(ErrorCodeEnum.EMPLOYEE_APP_ROLE_NULL);
				}
				if (employee.getScopePermisson() != null) {
					EmployeeAppScope as = employee.getScopePermisson();
					as.setMtime(d);
					as.setUserId(employee.getUserId());
					as.setCompanyId(employee.getCompanyId());
					as.setTenantId(currentUser.getTenantId());
					sqlManager.updateTemplateById(as);
				} else {
					throw new BizException(ErrorCodeEnum.EMPLOYEE_APP_SCOPE_NULL);
				}
			} else {
				throw new BizException(ErrorCodeEnum.TENANT_ID_ERROR);
			}
		} catch (Exception e) {
			DSTransactionManager.rollback();
			e.printStackTrace();
			throw e;
		}

		DSTransactionManager.commit();

		return true;
	}

}
